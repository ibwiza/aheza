// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  CLARK
  PARENT
}

enum PaymentMethod {
  CASH
  MOMO
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  memberId              String                 @unique
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Family {
  id        String   @id @default(cuid())
  names     String   @unique
  dob       DateTime
  code      String   @unique
  mother    String?
  father    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   Member[]
}

model Member {
  id            String         @id @default(cuid())
  names         String
  email         String         @unique
  phone         String         @unique
  code          String         @unique
  dob           DateTime
  joinDate      DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  familyId      String
  family        Family         @relation(fields: [familyId], references: [id])
  contributions Contribution[]
}

model Contribution {
  id            String        @id @default(cuid())
  amount        Float
  year          Int
  paymentMethod PaymentMethod @default(MOMO)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  memberId      String
  member        Member        @relation(fields: [memberId], references: [id])
}

model Type {
  id         Int      @id @default(autoincrement())
  cid        String   @unique @default(cuid())
  names      String   @unique
  percentage Int
  active     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
